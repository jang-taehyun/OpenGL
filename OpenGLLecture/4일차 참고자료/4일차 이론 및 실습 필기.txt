- Affine transform : scaling, rotation(Linear 변환), translation(translation 변환) 등을 모두 포함한 변환의 종류
  - 특성
    - affine transform matrix끼리 곱해도 affine transform matrix이다
    - 맨 아래 row가 (0 0 1)로 고정되어 있다.
      -> 맨 아래 row를 제외하여 2*3 matrix로 표현한다([L|t]로 표시)
          -> L : 2*2 matrix  / t : 2D column vector
              -> L 부분 : scaling, rotation 정보가 있다. & translation 정보는 포함되어 있지 않다.
              -> t 부분 : scaling, rotation, translation 정보가 포함되어 있다.
    -> 중요한 특징 : scaling, rotation, translation을 복잡하게 한 matrix M은 무조건 3*3 matrix인 T(translation 변환)와 L(linear 변환)로 나눌 수 있다.(affine matrix의 composition을 matrix T와 L로 decomposition.png 참고)
        -> scaling, rotation, translation이 얼마나 복잡하게 엮여있건, 한 번의 linear transform(matrix L)과 한 번의 translation transform(matrix T)으로 무조건 바꿀 수 있다.(M = TL)
  - Rigid motion : affine에서 scaling을 제외한 것
    -> affine transform의 특성을 이용하면, scaling, rotation, translation이 얼마나 복잡하게 엮여있건 한 번의 rotation transform(matrix R)과 한 번의 translation transform(matrix T)으로 무조건 바꿀 수 있다.(M = TR)

- 3D에서 scaling : 3D model 안에 있는 모든 vertex에 각각 scaling을 적용한다.
  - uniform scaling: x, y, z 축 모두 같은 양 만큼 scaling하는 것
  - non-uniform scaling : x, y, z 축에 다른 양 만큼 scaling하는 것
- 3D에서 rotation : 기준이 되는 axis(축)이 필요
  - 기준이 되는 axis의 좌표는 변하지 않고, 나머지가 변한다.
    -> 3D에서 x, y, z축을 기준으로 rotation하는 rotation transform matrix.png 참고
    - 때문에 x,y,z 축 기준을 모두 rotation을 하게 되면, x, y, z 축을 기준으로 rotation하는 matrix Rx, Ry, Rz를 모두 곱한다.
  - 회전 방향 : 오른손 법칙을 이용해, 엄지손가락을 기준이 되는 axis에 두고 나머지 손가락이 말리는 방향으로 회전
- 3D에서 translation : Homogeneous coordinate를 이용해 4*4 matrix로 만들어서 translation transform을 matrix의 곱으로 표현
-> 3D 에서도 Homogeneous coordinate를 이용해 4*4 matrix로 확장하여 transform을 matrix의 곱으로 표현한다.

- World transform : object space를 기준으로 정의된 모든 3D model의 vertex의 좌표를, world space를 기준으로 vertex의 좌표들을 변환
  - 3D에서도 affine transform의 중요한 특징이 적용된다.
  - 3D model은 object space에서의 vertex 좌표는 object space의 basis와 origin이 같이 이동한다.
    - world space에서 rotation transform는 object space의 basis가 변환되는 것이다.
      -> object space의 basis를 통해, world space 안에서 얼마나 rotation을 했는지 알 수 있다.
          -> (0,0) origin을 기준으로 object space의 basis는 rotation transform matrix의 column이기 때문
          -> (0,0) origin을 기준으로 world space의 basis에 rotation transform matrix를 곱하면 object space의 basis가 나온다.(world space의 basis를 합치면 identity matrix이기 때문)
              -> world space의 basis와 object space의 basis의 관계.png 참고
      -> rotation transform matrix는 3D model이 회전한 결과의 object space의 basis를 통해 만들 수 있다.
- translation, scaling에서 inverse의 의미 : translation transform 또는 scaling transform를 한 후, 다시 translation transform 또는 scaling transform를 하여 원래 상태로 되돌아오면 서로 역행렬 관계이다.
  - translation과 scaling에서 inverse의 의미.png 참고
- rotation에서 inverse의 의미 : orthonormal basis로 구성된 rotation transform matrix는 transpose가 역행렬이다.
  - rotation에서 inverse의 의미.png 참고
  -> rotate된 3D model을 원래 상태로 되돌릴려면, transpose을 이용한다.(rotation에서 inverse 사용 예시(rotate된 3D model을 원래대로 복구 할 때).png 참고)